{
  "src/lib/components/ChakraProvider.jsx": {
    "description": "Chakra UI context provider",
    "displayName": "ChakraProvider",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "themeExtension": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Object to extend Chakra UI theme",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "resetCSS": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Reset CSS inside provider",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/DashChakrauiComponents.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "DashChakrauiComponents",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A label that will be printed when this component is rendered."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value displayed in the input."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/Icon.jsx": {
    "description": "Icon component that render icons from Chakra UI library\nIf 'icon' does not exist in library, Chakra renders the\nfallback Icon (see https://chakra-ui.com/docs/media-and-icons/icon#fallback-icon)\n\nFor a list of icons, see https://chakra-ui.com/docs/media-and-icons/icon#all-icons",
    "displayName": "Icon",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Chakra UI icon name\nFor a list, refer to the documentation\nhttps://chakra-ui.com/docs/media-and-icons/icon#all-icons"
      },
      "viewBox": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon viewBox\nDefaults to '0 0 24 24'",
        "defaultValue": {
          "value": "\"0 0 24 24\"",
          "computed": false
        }
      },
      "boxSize": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon boxSize\nDefaults to '1em'",
        "defaultValue": {
          "value": "\"1em\"",
          "computed": false
        }
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon color"
      },
      "isFocusable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is an interactive element or just for presentation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/data_display/Stat.jsx": {
    "description": "WIP This component is EXPERIMENTAL and might become deprecated.\nShow statistics in a card\nComposes to `Box`, so all its props can be passed via `styleProps`",
    "displayName": "Stat",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "statLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "statLabel"
      },
      "statNumber": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "element"
            }
          ]
        },
        "required": false,
        "description": "statNumber"
      },
      "statHelpText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "statLabel"
      },
      "size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Stat component size \nDefaults to 'md'",
        "defaultValue": {
          "value": "'md'",
          "computed": false
        }
      },
      "colorScheme": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ColorScheme"
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Stat variant"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object"
      }
    }
  },
  "src/lib/components/forms/Button.jsx": {
    "description": "Button component",
    "displayName": "Button",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Internal function (DO NOT USE)"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "iconSpacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Spacing between button icon and label"
      },
      "isActive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Style button as in active state?\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is button disabled?\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isFullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display button with 100% width\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isLoading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display button in loading state\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "textLoading": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to display with spinner when loading"
      },
      "leftIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Left Icon"
      },
      "rightIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Right Icon"
      },
      "spinner": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Spinner"
      },
      "size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button size\nDefaults to 'md'",
        "defaultValue": {
          "value": "\"md\"",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button variant\nDefaults to 'solid'",
        "defaultValue": {
          "value": "\"solid\"",
          "computed": false
        }
      },
      "nClicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Click count",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "nClicksTimestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Last click timestamp (Unix)",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/forms/Checkbox.jsx": {
    "description": "",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Internal function (DO NOT USE)"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "isChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is checked?"
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is disabled?\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isRequired": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is checkbox required?\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Checkbox size\nDefaults to 'md'",
        "defaultValue": {
          "value": "\"md\"",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Value to be returned to forms"
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Checkbox variant\nDefaults to 'solid'"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object"
      }
    }
  },
  "src/lib/components/forms/Input.jsx": {
    "description": "Text Input component",
    "displayName": "Input",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Internal function (DO NOT USE)"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Internal value parameter (DO NOT USE as input)"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text placeholder"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input type\nDefaults to text",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      },
      "isInvalid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is invalid",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "colorScheme": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color scheme"
      },
      "size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button size\nDefaults to 'md'",
        "defaultValue": {
          "value": "'md'",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input variant \nOptions are 'outline', 'filled', 'flushed' or 'unstyled'\nDefaults to 'outline'",
        "defaultValue": {
          "value": "'outline'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/layout/AspectRatio.jsx": {
    "description": "Aspect Ratio component",
    "displayName": "AspectRatio",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "ratio": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Element ratio"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object\nUse maxWidth to adjust conent width"
      }
    }
  },
  "src/lib/components/layout/Box.jsx": {
    "description": "Box Component",
    "displayName": "Box",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "asProp": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Render element as tag",
        "defaultValue": {
          "value": "\"div\"",
          "computed": false
        }
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/layout/Center.jsx": {
    "description": "Center component",
    "displayName": "Center",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/layout/Circle.jsx": {
    "description": "Wrapper for Center component in cicle format",
    "displayName": "Circle",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": true,
        "description": "Component size"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/layout/Container.jsx": {
    "description": "Container Component",
    "displayName": "Container",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "centerContent": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Center content",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "colorScheme": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ColorScheme\nNot implemented in the default theme"
      },
      "size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component size \nNot implemented in the default theme"
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component variant\nNot implemented in the default theme"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/layout/Flex.jsx": {
    "description": "FlexBox component\nAccept other components as children. \nFor shortness, Flex props are passed in an object/dictionary.\n`Flex` composes `Box`, so any styleProps can be passed via `flexProps`\nFor details, see https://chakra-ui.com/docs/layout/flex",
    "displayName": "Flex",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "flexProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "FlexBox properties (includes styleProps)\nFor a list, refer to https://chakra-ui.com/docs/layout/flex#props"
      }
    }
  },
  "src/lib/components/layout/Grid.jsx": {
    "description": "Grid component\nAccept other components or `GridItem` as children. \nFor shortness, Grid props are passed in an object/dictionary.\n`Grid` composes `Box`, so any styleProps can be passed via `gridProps`\nFor details, see https://chakra-ui.com/docs/layout/flex",
    "displayName": "Grid",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "gridProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Grid properties (includes styleProps)\nFor a list, refer to https://chakra-ui.com/docs/layout/grid#props-1"
      }
    }
  },
  "src/lib/components/layout/GridItem.jsx": {
    "description": "GridItem component\nTo be used as child of Grid component\nSee: https://chakra-ui.com/docs/layout/grid#spanning-columns",
    "displayName": "GridItem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "colSpan": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of columns that the item should span"
      },
      "colStart": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Column number that grid item should start"
      },
      "colEnd": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Column number that grid item should end"
      },
      "rowSpan": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of rows that the item should span"
      },
      "rowStart": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Row number that grid item should start"
      },
      "rowEnd": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Row number that grid item should end"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/layout/Spacer.jsx": {
    "description": "Spacer component\nTo be used as Flex child \nSee https://chakra-ui.com/docs/layout/flex#using-the-spacer",
    "displayName": "Spacer",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id (dummy)"
      }
    }
  },
  "src/lib/components/layout/Square.jsx": {
    "description": "Wrapper for Center component in square format",
    "displayName": "Square",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": true,
        "description": "Component size"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/layout/Stack.jsx": {
    "description": "Stack component\nImplements VStack and HStack (via `direction` prop)",
    "displayName": "Stack",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "align": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Shorthand for `alignItems` style prop"
      },
      "direction": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "The direction to stack the items\nDefaults to 'column'",
        "defaultValue": {
          "value": "'column'",
          "computed": false
        }
      },
      "isInline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true` the items will be stacked horizontally\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "justify": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Shorthand for `justifyContent` style prop"
      },
      "shouldWrapChildren": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the children will be wrapped in a `Box` with `display: inline-block`, \nand the `Box` will take the spacing props\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The space between each stack item"
      },
      "wrap": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Shorthand for `flexWrap` style prop"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/layout/Wrap.jsx": {
    "description": "Wrap is a layout component that adds a defined space between its children. \nIt wraps its children automatically if there isn't enough space to fit any more in the same row.\nThink of it as a smarter flex-wrap with spacing support. \nIt works really well with things like dialog buttons, tags, and chips.",
    "displayName": "Wrap",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "align": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Shorthand for `alignItems` style prop"
      },
      "direction": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "The `flex-direction` value"
      },
      "justify": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `justify-content` value (for cross-axis alignment)"
      },
      "shouldWrapChildren": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the children will be wrapped in a `WrapItem`"
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The space between the each child (even if it wraps)"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/layout/WrapItem.jsx": {
    "description": "WrapItem component\nTo be used as child of `Wrap` component (if `shouldWrapChildren` is `false`)\nComposes to `Box`, so all its props can be passed via `styleProps`",
    "displayName": "WrapItem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/navigation/Breadcrumb.jsx": {
    "description": "Breadcrumbs, or a breadcrumb navigation, can help enhance how users navigate\nto previous page levels of a website, especially if that website has many pages or products.\nComposes to `Box`, so all its props can be passed via `styleProps`",
    "displayName": "Breadcrumb",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "separator": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Breadcrumbs separator\nCurrently supports only strings"
      },
      "colorScheme": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color scheme"
      },
      "size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Breadcrumb size\nNot implemented in default theme"
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The left and right margin applied to the separator"
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Breadcrumb variant\nNot implemented in default theme"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/navigation/BreadcrumbItem.jsx": {
    "description": "BreadcrumbItem element\nDoes not provide Link",
    "displayName": "BreadcrumbItem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "isCurrentPage": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When `true`, the BreadcrumbLink renders a span\nwith `aria-current` set to page instead of an anchor element.\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isLastChild": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Is last child?\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The left and right margin applied to the separator"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/navigation/BreadcrumbLink.jsx": {
    "description": "BreadcrumbLink element\nTo be used as child of Breadcrumb.\nComposes to `Link`, so all its props can be passed via `styleProps`",
    "displayName": "BreadcrumbLink",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Link href"
      },
      "isCurrentPage": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When `true`, the BreadcrumbLink renders a span\nwith `aria-current` set to page instead of an anchor element.\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The left and right margin applied to the separator"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/navigation/Link.jsx": {
    "description": "Link to navigate inside app or to external webpages",
    "displayName": "Link",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The URL of a linked resource."
      },
      "isExternal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, link opens in a new tab\nDefaults to false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isRefresh": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, page will be refreshed\nDefaults to false\nDummy if isExternal is true",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Link size\nNot implemented in default theme"
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Link variant\nNot implemented in default theme"
      }
    }
  },
  "src/lib/components/typography/Heading.jsx": {
    "description": "Text component is the used to render text and paragraphs within an interface. \nIt renders a <h2> tag by default.\nComposes to `Box`, so all its props can be passed via `styleProps`\nHeading differs from Text in fontWeight (bold)",
    "displayName": "Heading",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "asProp": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Render element as tag\nDefaults to 'p'",
        "defaultValue": {
          "value": "\"h2\"",
          "computed": false
        }
      },
      "fontSize": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Font size \nSupport T-shirt, CSS or number definitions\nDefaults to 'md'"
      },
      "isTruncated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, it render an ellipsis when the heading exceeds the width \nof the viewport or maxWidth prop.\nDefaults to `false`",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "colorScheme": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ColorScheme"
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text variant"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/typography/Text.jsx": {
    "description": "Text component is the used to render text and paragraphs within an interface. \nIt renders a <p> tag by default.\nComposes to `Box`, so all its props can be passed via `styleProps`",
    "displayName": "Text",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Component Id"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "asProp": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Render element as tag\nDefaults to 'p'",
        "defaultValue": {
          "value": "\"p\"",
          "computed": false
        }
      },
      "fontSize": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Font size \nSupport T-shirt, CSS or number definitions\nDefaults to 'md'"
      },
      "isTruncated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, it render an ellipsis when the heading exceeds the width \nof the viewport or maxWidth prop.\nDefaults to `false`",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "align": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS `text-align` property"
      },
      "casing": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS `text-transform` property"
      },
      "colorScheme": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "ColorScheme"
      },
      "decoration": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS `text-decoration` property"
      },
      "variant": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text variant"
      },
      "styleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "StyleProp object",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  }
}